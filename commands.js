require('dotenv').config()
const moment = require('moment-timezone');
moment.locale('ru');
moment.tz.setDefault('Europe/Moscow');
const logger = require('./logger');
const { GoogleTable } = require('./spreadsheet');


const getCurrentDuties = async ctx => {
    try {
        const tableM3 = new GoogleTable({ sheetID: process.env.SPREADSHEET_ID, sheetIndex: process.env.SHEET_INDEX });
        await tableM3.getSheetRows(process.env.SHEET_INDEX);
        
        if (tableM3.rows[0] == undefined) {
            ctx.reply(`‚ö† –ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤ –ø—É—Å—Ç–æ–π. 
                        üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ https://docs.google.com/spreadsheets/d/${process.env.SPREADSHEET_ID} –≤—Ä—É—á–Ω—É—é.
                        üñ≤ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏—Ö" –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –±–µ—Å–µ–¥—ã.`);
        }
        
        let today = moment();
        
        for (let i = tableM3.rows.length - 1; i >= 0; i--) {
            let dateUp = moment(tableM3.rows[i]['–ü–µ—Ä–∏–æ–¥'], 'DD-MM-YY').endOf('day');
            let weekBefore = moment(tableM3.rows[i]['–ü–µ—Ä–∏–æ–¥'], 'DD-MM-YY').subtract(6, 'days');
            
            if (today <= dateUp && today > weekBefore) {
                ctx.reply(`üìÖ –í —Å—Ä–æ–∫ –¥–æ ${dateUp.format('L')} –¥–µ–∂—É—Ä—è—Ç –ø–æ –∫—É—Ö–Ω–µ - ${tableM3.rows[i]['–ö—É—Ö–Ω—è'].replace(' ‚úîÔ∏è', '')}, –ø–æ –ö–í–¢ - ${tableM3.rows[i]['–ö–í–¢'].replace(' ‚úîÔ∏è', '')}.`);
                break;
            } else if (today > dateUp || i == 0) {
                ctx.reply(`üÜì –ù–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –¥–µ–∂—É—Ä—Å—Ç–≤ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ. 
                            üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ https://docs.google.com/spreadsheets/d/${process.env.SPREADSHEET_ID} –≤—Ä—É—á–Ω—É—é.
                            üñ≤ –õ–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏—Ö" –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –±–µ—Å–µ–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–µ–∂—É—Ä—Å—Ç–≤.`);
                break;
            }
        }
    } catch (error) {
        logger.error(error);
        ctx.reply('‚ùó–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ç–∞–±–ª–∏—Ü–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
    }
}

const fillScheduleByLastDuties = async ctx => {
    try {
        const tableM3 = new GoogleTable({ sheetID: process.env.SPREADSHEET_ID, sheetIndex: process.env.SHEET_INDEX });
        await tableM3.getSheetRows();
        
        if (tableM3.rows[0] == undefined) { return ctx.reply(`‚ö† –ì—Ä–∞—Ñ–∏–∫ –ø—É—Å—Ç–æ–π, –Ω–µ—á–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å.
                                                                üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ https://docs.google.com/spreadsheets/d/${process.env.SPREADSHEET_ID} –≤—Ä—É—á–Ω—É—é.
                                                                üñ≤ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏—Ö" –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –±–µ—Å–µ–¥—ã.`) };
        
        let today = moment();
        let lastDateInScheduleMinus2weeks = moment(tableM3.rows[tableM3.rows.length - 1]['–ü–µ—Ä–∏–æ–¥'], 'DD-MM-YY').subtract(14, 'days');
        
        if (today < lastDateInScheduleMinus2weeks) { return ctx.reply(`‚ö† –î–µ–∂—É—Ä—Å—Ç–≤–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä—ë–¥. –ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫ –¥–∞–ª–µ–∫–æ –≤ —ç—Ç–æ–º –∏–∑–º–µ–Ω—á–∏–≤–æ–º –º–∏—Ä–µ.
                                                                        üìÖ –ì—Ä–∞—Ñ–∏–∫: https://docs.google.com/spreadsheets/d/${process.env.SPREADSHEET_ID}`) };
        let lastDateInSchedule = moment(tableM3.rows[tableM3.rows.length - 1]['–ü–µ—Ä–∏–æ–¥'], 'DD-MM-YY');
        let newDutyDate = null;
        
        if (today > lastDateInSchedule) {
            if (today.weekday() >= lastDateInSchedule.weekday()) {
                newDutyDate = moment().add(7, 'days').weekday(lastDateInSchedule.weekday());
            } else {
                newDutyDate = moment().weekday(lastDateInSchedule.weekday());
            }
        } else {
            newDutyDate = lastDateInSchedule.add(7, 'days');
        }
        
        let dutyList = [];
        
        for (let i = tableM3.rows.length - 1; i >= 0 && i >= tableM3.rows.length - 3; i--) {
            for (let j = 2; j >= 1; j--) {
                if (!dutyList.includes(tableM3.rows[i]._rawData[j].replace(' ‚úîÔ∏è', ''))) {
                    dutyList.unshift(tableM3.rows[i]._rawData[j].replace(' ‚úîÔ∏è', ''));
                }
            }
        }
        
        if (dutyList.length % 2 == 0) {
            for (let i = 0; i <= dutyList.length - 1; i = i + 2) {
                await tableM3.addRow({ –ü–µ—Ä–∏–æ–¥: newDutyDate.format('L'), –ö—É—Ö–Ω—è: dutyList[i + 1], –ö–í–¢: dutyList[i] });
                newDutyDate.add(7, 'days');
            }
        } else {
            dutyList.push(dutyList[0]);
            for (let i = 0; i <= dutyList.length - 1; i = i + 2) {
                await tableM3.addRow({ –ü–µ—Ä–∏–æ–¥: newDutyDate.format('L'), –ö—É—Ö–Ω—è: dutyList[i], –ö–í–¢: dutyList[i + 1] });
                newDutyDate.add(7, 'days');
            }
        }
        
        return ctx.reply('‚úÖ –ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω.');
    } catch (error) {
        logger.error(error);
        return ctx.reply('‚ùó–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ç–∞–±–ª–∏—Ü–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
    }
}

const confirmDuty = async ctx => {
    try{
        const tableM3 = new GoogleTable({ sheetID: process.env.SPREADSHEET_ID, sheetIndex: process.env.SHEET_INDEX });
        await tableM3.getSheetRows(process.env.SHEET_INDEX);

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º—è —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if (tableM3.rows[0] == undefined) { // –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è
            return ctx.reply(`üìí –ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤ –ø—É—Å—Ç–æ–π. –ù–µ—á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.
                                üñ≤ –ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–∏–æ–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–∂—É—Ä–Ω—ã—Ö" –ª–∏–±–æ –≤–Ω–µ—Å–∏—Ç–µ –¥–µ–∂—É—Ä–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é.`);
        }

        let today = moment();
        let lastDateInSchedule = moment(tableM3.rows[tableM3.rows.length - 1]['–ü–µ—Ä–∏–æ–¥'], 'DD-MM-YY').endOf('day');

        if (today.diff(lastDateInSchedule, 'days') >= 4) {
            return ctx.reply(`üï∏Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–µ–∂—É—Ä—Å—Ç–≤ —Å—Ç–∞—Ä—à–µ —á—ë—Ç—ã—Ä—ë—Ö –¥–Ω–µ–π. –ù–µ—á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.
                                üñ≤ –ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–∏–æ–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–∂—É—Ä–Ω—ã—Ö" –ª–∏–±–æ –≤–Ω–µ—Å–∏—Ç–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é.`);
        }

        let currentRow;
        let previousRow;

        for (let i = tableM3.rows.length - 1; i >= 0; i--) {
            let dateInSchedule = moment(tableM3.rows[i]['–ü–µ—Ä–∏–æ–¥'], 'DD-MM-YY').endOf('day');
            let weekBefore = moment(tableM3.rows[i]['–ü–µ—Ä–∏–æ–¥'], 'DD-MM-YY').subtract(6, 'days');

            if (today <= dateInSchedule && today >= weekBefore) {
                currentRow = i;
                previousRow = currentRow != 0 ? currentRow - 1 : previousRow;
                break;
            } else if (today > dateInSchedule) {
                previousRow = i;
                break;
            } else if (i == 0) {
                currentRow = i;
                break;
            }
        }
        
        const { bot } = require('./index');
        let res = await bot.execute('users.get', {
            user_ids: ctx.message.from_id,
            fields: 'screen_name',
        });
        let dutyName = res[0].screen_name;

        if (previousRow != undefined) {
            let previousDate = moment(tableM3.rows[previousRow]['–ü–µ—Ä–∏–æ–¥'], 'DD-MM-YY').endOf('day');

            if (today.diff(previousDate, 'days') <= 4) {
                let kitchen = tableM3.rows[previousRow]['–ö—É—Ö–Ω—è'].includes('‚úîÔ∏è') ? { check: true } : { check: false, duty: tableM3.rows[previousRow]['–ö—É—Ö–Ω—è']};
                let kvt = tableM3.rows[previousRow]['–ö–í–¢'].includes('‚úîÔ∏è') ? { check: true } : { check: false, duty: tableM3.rows[previousRow]['–ö–í–¢'] };

                if (!kitchen.check && kitchen.duty.includes(dutyName)) {
                    tableM3.rows[previousRow]['–ö—É—Ö–Ω—è'] += ' ‚úîÔ∏è';
                    await tableM3.rows[previousRow].save();
                    return ctx.reply(`‚úîÔ∏è –î–µ–∂—É—Ä—Å—Ç–≤–æ –ø–æ –ö—É—Ö–Ω–µ –∑–∞ ${tableM3.rows[previousRow]['–ü–µ—Ä–∏–æ–¥']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!
                                        üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ –≤–æ–≤—Ä–µ–º—è!`);
                }

                if (!kvt.check && kvt.duty.includes(dutyName)) {
                    tableM3.rows[previousRow]['–ö–í–¢'] += ' ‚úîÔ∏è';
                    await tableM3.rows[previousRow].save();
                    return ctx.reply(`‚úîÔ∏è –î–µ–∂—É—Ä—Å—Ç–≤–æ –ø–æ –ö–í–¢ –∑–∞ ${tableM3.rows[previousRow]['–ü–µ—Ä–∏–æ–¥']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! 
                                        üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ –≤–æ–≤—Ä–µ–º—è!`);
                }
            }
        }

        if (currentRow != undefined) {
            let currentDate = moment(tableM3.rows[currentRow]['–ü–µ—Ä–∏–æ–¥'], 'DD-MM-YY').endOf('day');

            if (currentDate.diff(today, 'days') > 7) {
                return ctx.reply(`üìÖ –ë–ª–∏–∂–∞–π—à–∏–π —Å—Ä–æ–∫ –¥–µ–∂—É—Ä—Å—Ç–≤–∞: ${tableM3.rows[currentRow]['–ü–µ—Ä–∏–æ–¥']} - –ø–æ–∑–¥–Ω–µ–µ –Ω–µ–¥–µ–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞. 
                                    üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏ –≤—Ä—É—á–Ω—É—é –ø–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.`)
            }

            if (currentDate.diff(today, 'days') > 2) {
                return ctx.reply(`‚úñÔ∏è –î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ –º–æ–∂–Ω–æ –Ω–µ —Ä–∞–Ω—å—à–µ –¥–≤—É—Ö –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞.
                                    üìÖ –°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞: ${tableM3.rows[currentRow]['–ü–µ—Ä–∏–æ–¥']}.`);
            }

            let kitchen = tableM3.rows[currentRow]['–ö—É—Ö–Ω—è'].includes('‚úîÔ∏è') ? { check: true } : { check: false, duty: tableM3.rows[currentRow]['–ö—É—Ö–Ω—è']};
            let kvt = tableM3.rows[currentRow]['–ö–í–¢'].includes('‚úîÔ∏è') ? { check: true } : { check: false, duty: tableM3.rows[currentRow]['–ö–í–¢'] };

            if (!kitchen.check && kitchen.duty.includes(dutyName)) {
                tableM3.rows[currentRow]['–ö—É—Ö–Ω—è'] += ' ‚úîÔ∏è';
                await tableM3.rows[currentRow].save();
                return ctx.reply(`‚úîÔ∏è –î–µ–∂—É—Ä—Å—Ç–≤–æ –ø–æ –ö—É—Ö–Ω–µ –∑–∞ ${tableM3.rows[currentRow]['–ü–µ—Ä–∏–æ–¥']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! 
                                    üëç –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!`);
            }

            if (!kvt.check && kvt.duty.includes(dutyName)) {
                tableM3.rows[currentRow]['–ö–í–¢'] += ' ‚úîÔ∏è';
                await tableM3.rows[currentRow].save();
                return ctx.reply(`‚úîÔ∏è –î–µ–∂—É—Ä—Å—Ç–≤–æ –ø–æ –ö–í–¢ –∑–∞ ${tableM3.rows[currentRow]['–ü–µ—Ä–∏–æ–¥']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! 
                                    üëç –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!`);
            }
        }

        return ctx.reply(`‚úñÔ∏è –í–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ —Å—Ä–µ–¥–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –∏ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`);

    } catch (error) {
        logger.error(error);
        return ctx.reply('‚ùó–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ç–∞–±–ª–∏—Ü–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
    }
}

module.exports = { getCurrentDuties, fillScheduleByLastDuties, confirmDuty };
